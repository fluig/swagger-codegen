package {{package}};

{{#imports}}import {{import}};
{{/imports}}

import java.util.Map;
import java.util.HashMap;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;

import sdk.fluig.com.core.enums.CacheType;
import sdk.fluig.com.core.rest.ResponseConverterType;
import sdk.fluig.com.core.rest.RestClient;
import sdk.fluig.com.core.rest.model.RestParamsImpl;
import sdk.fluig.com.core.rest.enums.MethodHttpType;
import sdk.fluig.com.core.enums.ConfigurationValidateType;
import sdk.fluig.com.core.rest.model.BasicNameValuePair;
import sdk.fluig.com.core.rest.RequestExecutor;
import sdk.fluig.com.core.rest.CallBackObjectRequisition;
import sdk.fluig.com.core.rest.CallBackRequisition;
import sdk.fluig.com.api.rest.CallServiceBase;
import sdk.fluig.com.api.utils.ApiMapperUtils;
import sdk.fluig.com.api.rest.RestClientBaseUtils;
import sdk.fluig.com.core.rest.RestClientUtils;
import com.google.gson.Gson;

{{#operations}}

  public class {{classname}} extends CallServiceBase implements Version{{classname}}Service {
  
    private Version{{classname}}Service versionService;

	public {{classname}}(){
		super();
	}	

	public {{classname}}(CacheType cacheType){
		super(cacheType);
	}	

	public {{classname}}(int sessionId){
		super(sessionId);
	}	

	public {{classname}}(int sessionId, CacheType cacheType){
		super(sessionId, cacheType);
	}	

    protected void initConfiguration(){

        super.initConfiguration();

        if (versionService == null){
            this.versionService = new {{classname}}Definition(sessionId, cacheType);
        }

    }

    {{#operation}}

		@Override  
  		public RequestExecutor {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}} {{#returnType}}{{#hasParams}},{{/hasParams}} CallBackRequisition<{{{returnType}}}> callBackRequisition {{/returnType}}{{^returnType}}{{#hasParams}},{{/hasParams}} CallBackObjectRequisition callBackRequisition{{/returnType}}){
	  		return versionService.{{nickname}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#hasParams}},{{/hasParams}} callBackRequisition);
	  	}
  	 
	{{/operation}}
  
  }
  
  interface Version{{classname}}Service {

  {{#operation}}
  	RequestExecutor {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}} {{#returnType}}{{#hasParams}},{{/hasParams}} CallBackRequisition<{{{returnType}}}> callBackRequisition {{/returnType}}{{^returnType}}{{#hasParams}},{{/hasParams}} CallBackObjectRequisition callBackRequisition{{/returnType}}); 
  {{/operation}}
  
  }

 class {{classname}}Definition implements Version{{classname}}Service  {

    private int sessionId = 0;

    private final CacheType cacheType;

    public {{classname}}Definition(int sessionId, CacheType cacheType) {
        this.sessionId = sessionId;
        this.cacheType = cacheType;
    }

  {{#operation}}
  /**
   * {{summary}}
   * {{notes}}
{{#allParams}}   * @param {{paramName}} {{description}}
{{/allParams}}   * @return RequestExecutor
   */
  public RequestExecutor {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}} {{#returnType}}{{#hasParams}},{{/hasParams}} CallBackRequisition<{{{returnType}}}> callBackRequisition {{/returnType}}{{^returnType}}{{#hasParams}},{{/hasParams}} CallBackObjectRequisition callBackRequisition{{/returnType}}) {

     ResponseConverterType responseConverterType = new ResponseConverterType(callBackRequisition, null, null);

     RestClient restClient = RestClientUtils.getRestClientDefault(sessionId, cacheType, responseConverterType);

     RestParamsImpl restParams = (RestParamsImpl) restClient.getRestContract();

     restParams.setMethodHttpType(MethodHttpType.{{httpMethod}});

	if (!"{{httpMethod}}".equals(MethodHttpType.GET.toString())){
   		restParams.setRequisitionCacheable(false);
	}	

	{{#returnType}}
	{{/returnType}}
	{{^returnType}}
	restParams.setConvertJson(false);
	{{/returnType}}

    restParams.setUrlRest("{{{basePathWithoutHost}}}" + "{{{path}}}".replaceAll("\\{format\\}","json"){{#pathParams}}.replaceAll("\\{" + "{{baseName}}" + "\\}", ApiMapperUtils.escapeString(({{{paramName}}} == null ? "" : {{{paramName}}}.toString()))){{/pathParams}});

	{{#hasHeaderParams}}
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    {{#headerParams}}
	localVarHeaderParams.put("{{baseName}}", ApiMapperUtils.parameterToString({{paramName}}));
    {{/headerParams}}

 	if (localVarHeaderParams.size() > 0){

		Iterator it = localVarHeaderParams.entrySet().iterator();
	
	    while (it.hasNext()) {
	        Map.Entry<String, String> pair = (Map.Entry<String, String>)it.next();
			restParams.addHeader(pair.getKey(), pair.getValue());
	    }
 	
 	}
	{{/hasHeaderParams}}

	{{#allParams}}
  	{{#required}}
    if ({{paramName}} == null) {
   		restParams.addRequiredParam("{{paramName}}");
   	} 
    {{/required}}
   	{{/allParams}}

    String[] localVarContentTypes = { {{#consumes}}"{{{mediaType}}}"{{#hasMore}},{{/hasMore}}{{/consumes}} };
    
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    restParams.setContentType(localVarContentType);

	{{#hasQueryParams}}

    List<BasicNameValuePair> localVarQueryParams = new ArrayList<BasicNameValuePair>();
    
    {{#queryParams}}
   	localVarQueryParams.addAll(ApiMapperUtils.parameterToPairs("{{#collectionFormat}}{{{collectionFormat}}}{{/collectionFormat}}", "{{baseName}}", {{paramName}}));
    {{/queryParams}}
 	
 	if (localVarQueryParams.size() > 0){
		
		for (BasicNameValuePair basicNameValuePair : localVarQueryParams){
			restParams.addParam(basicNameValuePair.getName(), basicNameValuePair.getValue());
		} 		
 	
 	}
 	
	{{/hasQueryParams}}

	Object localVarPostBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    
    if (localVarContentType.startsWith("multipart/form-data")) {
	  //Todo: Verificar se será usado requisiões com multipart 	
      /*		
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      {{#formParams}}{{#notFile}}
      if ({{paramName}} != null) {
        localVarBuilder.addTextBody("{{baseName}}", ApiInvoker.parameterToString({{paramName}}), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      {{/notFile}}{{#isFile}}
      if ({{paramName}} != null) {
        localVarBuilder.addBinaryBody("{{baseName}}", {{paramName}});
      }
      {{/isFile}}{{/formParams}}
      localVarPostBody = localVarBuilder.build();
      */
      
    } else {

      {{#hasFormParams}}

	  Map<String, String> localVarFormParams = new HashMap<String, String>();
      {{#formParams}}
      {{#notFile}}
      localVarFormParams.put("{{baseName}}", ApiMapperUtils.parameterToString({{paramName}}));
      {{/notFile}}
      {{/formParams}}
      
	  if (localVarFormParams.size() > 0){
	
	  	Iterator it = localVarFormParams.entrySet().iterator();
	
	    while (it.hasNext()) {

	        Map.Entry<String, String> pair = (Map.Entry<String, String>)it.next();

			restParams.addBodyParam(pair.getKey(), pair.getValue());

	    }
 	
	  }
	  
      {{/hasFormParams}}
      
    }
    
    if (localVarPostBody != null){

        Gson gson = new Gson();

	    String jsonBodyParam =  gson.toJson(localVarPostBody);

        restParams.setBinaryBodyParam(jsonBodyParam.getBytes());
		
    }
    
    return restClient;

  }
  
  {{/operation}}

} 

{{/operations}}
